
	ADPCM converter library 'adpcmlib.a' ver0.02
		    -	解説書	-
					(C)Otankonas

1. これについて

  ADPCM関係の低級コールをまとめたライブラリです。adpcm<->pcm変換が

必要なときに、簡単にプログラムに組み込めます（たぶん…）。


2. 使用方法

  アセンブラでプログラムを書くのが前提です。（Ｃ知らなくて^^;)

まず、プログラムの先頭で、.xrefにて、以下のシンボルを参照するように

します。

例）
	.xref	ad_set_panpot
	.xref	ptoa_make_buffer
	.xref	ptoa_init
	.xref	ptoa_exec
	.xref	atop_make_buffer
	.xref	atop_init
	.xref	atop_exec
	.xref	atop_mem
	.xref	atop_set
	.xref	atop_null_exec

あとは、下記のcallの書式に従ってプログラムを書いてください。

callの呼び出しの形式は、サブルーチンと同じです。bsrで届かなかったら

jsrを使ってください。

　最後に、リンカでadpcmlib.aをリンクしておしまいです。.bss領域と

重ならないように、なるべく間に挟む用にしてください。

例）	hlk 本体.o adpcmlib.a


3. callの仕様について

  PCM->ADPCM変換と、ADPCM->PCM変換のcallがあります。


PCM->ADPCM関係
=======================================================================

ptoa_make_buffer:
	in : なし
	out: なし 破壊レジスタ: なし
機能: 	PCM->ADPCM変換用のバッファを作成します。
	これを実行しないと変換ができません。

使用例:	jsr	ptoa_make_buffer

=======================================================================

ptoa_init:
	in : D0.W=0でmonaural、それ以外はstereo
	out: なし 破壊レジスタ: なし
機能: 	変換バッファを初期化する。また、ステレオ・モノラルの指定に使用。
	新しいデータを変換する前に、必ず実行してください。

使用例:	move.l	#-1,d0
	jsr	ptoa_init

=======================================================================

ptoa_exec:
	in : D0.L=PCMの実サイズ
	     A0.L=PCMのアドレス
	     A1.L=ADPCMのアドレス
	out: なし 破壊レジスタ: なし
機能: 	PCM->ADPCM変換をおこなう。入力のPCMサイズとは、実際のPCMの
	サイズ	で、PCMデータの個数のことではありません。（要注意！）
	変換を何回かに分けることもできます。（前回の値は保存されて
	いるので、安心してください）

使用例: lea.l	pcma_add,a0		* PCMのアドレス
	lea.l	ada_add,a1		* ADPCMのアドレス
	move.l	#1000,d0		* PCMのサイズ
	jsr	ptoa_exec		* PCM->ADPCM変換を実行
					* 1000/4=250バイトのADPCMが
					* 作られます。

=======================================================================


ADPCM->PCM関係
=======================================================================

atop_make_buffer:
	in : A0.L=ADPCM->PCM変換用テーブルを示すアドレス 
	out: なし 破壊レジスタ: なし
機能: 	ADPCM->PCM変換用のバッファを作成します。このテーブルは
	大きいので(141312バイト必要です）、ライブラリの外に
	作るようになっています。.bss領域などに用意しておいてください。

使用例:	lea	buffer,a0		* 変換用テーブルのアドレス
	jsr	atop_make_buffer	* バッファを作成

buffer:	ds.b	141312			* 変換用テーブル

=======================================================================

atop_init:
	in : D0.W=0でmonaural、それ以外はstereo
	out: なし 破壊レジスタ: なし
機能: 	変換バッファを初期化する。また、ステレオ・モノラルの指定に使用。
	新しいデータを変換する前に、必ず実行してください。

使用例:	move.l	#-1,d0
	jsr	atop_init

=======================================================================

atop_exec:
	in : D0.L=ADPCMのサイズ(*)
	     A0.L=ADPCMのアドレス
	     A1.L=PCMのアドレス
	out: なし 破壊レジスタ: なし
機能: 	ADPCM->PCM変換をおこなう。入力のADPCMサイズとは、実際のADPCMの
	サイズで、PCMデータの個数のことではありません。作られるPCMは
	ADPCMの４倍のサイズになります。
	変換を何回かに分けることもできます。（前回の値は保存されている
	ので、安心してください）

使用例:	lea	ada_add,a0		* ADPCMのアドレス
	lea	pcma_add,a1		* PCMのアドレス
	move.l	#1000,d0		* ADPCMのサイズ
	jsr	atop_exec		* ADPCM->PCM変換を実行
					* 1000*4=4000バイトのPCMが
					* 作られます。

=======================================================================

=======================================================================

- 追加callについて -

　ADPCMのデータは、初期値から相対的に値が決められるので、データの

途中から再生すると、値がずれてしまって、正常に再生できません。

よって、中継地点のADPCM用レジスタを保存するcallを新たに設けました。

mono/stereoは、あらかじめatop_init或いは、ad_set_panpotにて

設定しておいてください。


atop_mem:
	in : A0.L=レジスタの値を保存するアドレス
	out: なし 破壊レジスタ: なし
機能:	現在のADPCM用レジスタの値を、A0レジスタが示すアドレスに
	保存します。
	モノラルで8バイト、ステレオで16バイトの大きさになります。
	atop_setでこの値をセットすれば、その位置から正常にADPCMを
	鳴らせます。


atop_set:
	in : A0.L=レジスタの値が入っているアドレス
	out: なし 破壊レジスタ: なし
機能:	A0レジスタが示すアドレスから、ADPCM用レジスタに値をセットします。
	モノラルで8バイト、ステレオで16バイト必要です。


atop_null_exec:
	in : D0.L=ADPCMのサイズ(*)
	     A0.L=ADPCMのアドレス
	out: なし 破壊レジスタ: なし
機能: 	ADPCM->PCM変換をおこないます。動作はatop_execと全く同じですが、
	PCMデータの作成はおこないません。レジスタの値だけが必要な
	時にコールしてください。


おまけのcall↓

ad_set_panpot:
	in : D0.W=0でmono,それ以外はstereo
	out: なし 破壊レジスタ: なし
機能:	パンポットの設定のみを行います。

=======================================================================


4. 配布その他について

　商的利用などでなければ、配布＆利用などの制限は付けません。ただし、

Ｑ２な所は例外です。

バグがまだどこかに隠れているかもしれないので、もし不都合があったら

連絡などおねがいします^^;


			   E-MAIL: eb055054@e50.ecs.toyama-u.ac.jp
			  TAS-NET: TAS-0151 おたんこなす
			CUREC-NET: CNET0042 AKI.
