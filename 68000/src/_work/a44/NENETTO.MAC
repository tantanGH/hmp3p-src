*
* nenetto.mac
*
*  Mon Jan  9 21:37 JST 1995 (nenetto)

		.nlist

NULL		equ	$00
NIL		equ	$00
EOS		equ	$00
BS		equ	$08
TAB		equ	$09
LF		equ	$0a
CR		equ	$0d
SB		equ	$1a
EOF		equ	$1a
ESC		equ	$1b
SPACE		equ	$20
SPC		equ	$20
CRTC		equ	$e80000
G_VRAM		equ	$c00000
T_VRAM		equ	$e00000
GPALET		equ	$e82000
TPALET		equ	$e82200

TRUE		equ	0
YES		equ	0
ON		equ	0
FALSE		equ	-1
NO		equ	-1
OFF		equ	-1

* ------------- ----------- --------------

* ------------- DOS -------------

exit		macro
		DOS	__EXIT
		endm

exit2		macro	code
		move.w	#code,-(SP)
		DOS	__EXIT2
		endm

PRINT		macro	str
		.local	data
		.data
	 data:	.dc.b	str,$d,$a,0
		.text
		pea	foo
		DOS	___PRINT
		addq	#4,sp
		endm

print		macro	mes
		pea	mes
		DOS	__PRINT
		addq	#4,sp
		endm

print2		macro	reg
		move.l	reg,-(sp)
		DOS	__PRINT
		addq	#4,sp
		endm

set_block	macro
		lea	$10(a0),a0
		suba.l	a0,a1
		pea.l	(a1)
		pea.l	(a0)
		DOS	__SETBLOCK
		addq	#8,sp
		endm

input		macro	inpptr
		pea	inpptr
		move.w	#$a,-(SP)
		DOS	__KFLUSH
		addq	#6,SP
		endm

inkey		macro
		move.w	#7,-(SP)
		DOS	__KFLUSH
		addq	#2,SP
		endm

inkey2		macro
		move.w	#8,-(SP)
		DOS	__KFLUSH
		addq	#2,SP
		endm

clr_kbuf	macro
		clr.w	-(sp)
		DOS	__KFLUSH
		addq	#2,sp
		endm

cls		macro
		move.w	#2,-(SP)
		move.w	#10,-(SP)
		DOS	__CONCTRL
		addq	#4,SP
		endm

curon		macro
		move.w	#17,-(SP)
		DOS	__CONCTRL
		addq	#2,sp
		endm

curoff		macro
		move.w	#18,-(SP)
		DOS	__CONCTRL
		addq	#2,sp
		endm

funcon		macro
		move.w	#0,-(sp)
		move.w	#14,-(sp)
		DOS	__CONCTRL
		addq	#4,sp
		endm

funcoff		macro
		move.w	#2,-(sp)
		move.w	#14,-(sp)
		DOS	__CONCTRL
		addq	#4,sp
		endm

locate		macro	locx,locy
		move.w	#locy,-(SP)
		move.w	#locx,-(SP)
		move.w	#3,-(SP)
		DOS	__CONCTRL
		addq	#6,SP
		endm

open		macro	nameptr,mode
		move.w	mode,-(sp)
		move.l	nameptr,-(sp)
		DOS	__OPEN
		addq	#6,sp
		endm

close		macro	handle
		move.w	handle,-(sp)
		DOS	__CLOSE
		addq	#2,sp
		endm

create		macro	nameptr,atr
		move.w	atr,-(sp)
		move.l	nameptr,-(sp)
		DOS	__CREATE
		addq	#6,sp
		endm

seek		macro	handle,offset,mode
		move.w	mode,-(sp)
		move.l	offset,-(sp)
		move.w	handle,-(sp)
		DOS	__SEEK
		addq	#8,sp
		endm

read		macro	handle,dataptr,size
		move.l	size,-(sp)
		move.l	dataptr,-(sp)
		move.w	handle,-(sp)
		DOS	__READ
		lea	10(sp),sp
		endm

write		macro	handle,dataptr,size
		move.l	size,-(sp)
		move.l	dataptr,-(sp)
		move.w	handle,-(sp)
		DOS	__WRITE
		lea	10(sp),sp
		endm

save		macro	nameptr,dataptr,size
		 create	nameptr,#%10_0000
		move.w	d0,-(sp)
		 write	d0,dataptr,size
		 close	(sp)+
		endm

load		macro	nameptr,dataptr,size
		 open	nameptr,#0
		move.w	d0,-(sp)
		 read	d0,dataptr,size
		 close	(sp)+
		endm


* ------------- IOCS -------------

to_super	macro
		suba.l	a1,a1
		IOCS	__B_SUPER
		move.l	d0,-(sp)
		endm

to_user		macro	ssp
		movea.l	(sp)+,a1
		IOCS	__B_SUPER
		endm

super		macro	ssp
		suba.l	a1,a1
		IOCS	__B_SUPER
		move.l	d0,ssp
		endm

user		macro	ssp
		movea.l	ssp,a1
		IOCS	__B_SUPER
		endm

b_cls		macro
		move.b	#2,d1
		IOCS	__B_CLR_ST
		endm

b_print		macro	mes
		lea	mes,a1
		IOCS	__B_PRINT
		endm

b_color		macro	pal
		push	d1
		move.w	pal,d1
		IOCS	__B_COLOR
		pop	d1
		endm

b_locate	macro	x,y
		movem.l	d0-d2,-(sp)
		move.w	#x,d1
		move.w	#y,d2
		IOCS	__B_LOCATE
		movem.l	(sp)+,d0-d2
		endm

contrast	macro	num
		move.b	num,d1
		IOCS	__CONTRAST
		endm

keywait		macro
		.local	loop
		move.l	d0,-(sp)
	 loop:	IOCS	__B_KEYINP
		btst	#$f,d0
		bne	loop
		move.l	(sp)+,d0
		endm

* ------------- etc -------------

if_false	macro	flag,address
		tst.b	flag
		beq	address
		endm

if_true		macro	flag,address
		tst.b	flag
		bne	address
		endm

ifeq		macro	flag,address
		tst.b	flag
		beq	address
		endm

ifne		macro	flag,address
		tst.b	flag
		bne	address
		endm

di		macro
		ori.w	#$0700,sr
		endm

ei		macro
		andi.w	#$f8ff,sr
		endm

push		macro	regs
		movem.l	regs,-(sp)
		endm

pop		macro	regs
		movem.l	(sp)+,regs
		endm

push_all	macro
		movem.l	d0-d7/a0-a6,-(sp)
		endm

pop_all		macro
		movem.l	(sp)+,d0-d7/a0-a6
		endm

strcpy		macro	src,dist
		.local	loop
	 loop:	move.b	(src)+,(dist)+
		bne	loop
		subq	#1,dist
		endm

touper		macro	tupptr
		.local	toup_r
		cmp.b	#'a',tupptr
		bcs	toup_r
		cmp.b	#'z',tupptr
		bhi	toup_r
		sub.b	#$20,tupptr
	 toup_r:
		endm

ceq		macro	call
		.local	skip
		bne	skip
		bsr	call
	skip:
		endm

cne		macro	call
		.local	skip
		beq	skip
		bsr	call
	skip:
		endm

ccc		macro	call
		.local	skip
		bcs	skip
		bsr	call
	skip:
		endm

ccs		macro	call
		.local	skip
		bcc	skip
		bsr	call
	skip:
		endm

cmi		macro	call
		.local	skip
		bpl	skip
		bsr	call
	skip:
		endm

cpl		macro	call
		.local	skip
		bmi	skip
		bsr	call
	skip:
		endm

* ------------- IO -------------

sram_on		macro
		move.b	#$31,$E8E00D
		endm

sram_off	macro
		clr.b	$E8E00D
		endm

vwait		macro	num
		.local	v0
		.local	v1
		move.l	d0,-(sp)
		move.l	#num,d0
	 v0:	btst	#4,$e88001
		beq	v0
	 v1:	btst	#4,$e88001
		bne	v1
		dbra	d0,v0
		move.l	(sp)+,d0
		endm

vwait1		macro
		.local	v0
		.local	v1
	 v0:	btst	#4,$e88001
		beq	v0
	 v1:	btst	#4,$e88001
		bne	v1
		endm

voffwait	macro
		.local	v1
	 v1:	btst	#4,$e88001
		bne	v1
		endm

vonwait		macro
		.local	v0
	 v0:	btst	#4,$e88001
		beq	v0
		endm

opmwait		macro
		.local	wait
	 wait:	btst.b	#$07,$e90003
		bne	wait
		endm

gcls		macro
		ori.b	#%00001111,$e8002b
		bset.b	#1,$e80481
		endm

		.list
