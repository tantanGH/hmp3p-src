* 釗釗釗釗釗釗釗釗釗釗釗釗釗釗釗釗釗釗釗釗釗釗釗釗釗釗釗釗釗釗
*    16bit PCM player for Mercury-Unit V2,V3                 
*     play16                                                 
*                                         (C)1993,94 nenetto 
* 釗釗釗釗釗釗釗釗釗釗釗釗釗釗釗釗釗釗釗釗釗釗釗釗釗釗釗釗釗釗
*                                                    play16.o

				.include	nenetto4.mac
				.cpu		68000


A_dma_ch2	equ	$e84080
A_pcm_data	equ	$ecc080
A_pcm_command	equ	$ecc091
A_pcm_status	equ	$ecc0a1

テキスト_L	equ	$e2a088
テキスト2_L	equ	$e29f88
テキスト_R	equ	$e2a0b8
テキスト2_R	equ	$e29fb8

Volume_ber_L	equ	$e2a0aa
Volume_ber_C	equ	$e2a0ae
Volume_ber_R	equ	$e2a0b4

wait_LRCK	macro
		movea.l	#A_dma_ch2,a0
	@@:	btst.b	#0,(a0)				* dmac ch2 PCL		rec時は
		beq	@b				* wait 'R'>'L' clock	逆なので
	@@:	btst.b	#0,(a0)							注意
		bne	@b				* wait 'L'>'R' clock	
		endm

wait_LRCK2	macro
		movea.l	#A_dma_ch2,a0
	@@:	btst.b	#0,(a0)				* dmac ch2 PCL
		bne	@b				* wait 'L'>'R' clock
	@@:	btst.b	#0,(a0)				
		beq	@b				* wait 'R'>'L' clock
		endm

putmes	macro	x,y,ml,msg
	move.b	#%0011,d1
	move.w	#x,d2
	move.w	#y,d3
	move.w	#ml,d4
	lea.l	msg,a1
	IOCS	_B_PUTMES
	endm

topadd:		dc.l	'SAK1'
		dc.l	_mfree
F_int_mfree:	dc.w	0		* internal mfree call
F_ext_mfree:	dc.w	0		* external mfree call



D_clock:	dc.b	1
D_input:	dc.b	0
D_pcm_com:	dc.b	0
		dc.b	0

*--------------------------------------------------------------------------------------
_start_dmac:
		wait_LRCK
		move.b	#%1000_1000,A_dma_ch2+7			* DMA start
		
*		move.b	D_pcm_com,d0
*		or.b	#%0000_0100,d0
*		wait_LRCK
*		move.b	d0,A_pcm_command			* Lch mute off
*		or.b	#%0000_1000,d0
*		wait_LRCK2
*		move.b	d0,A_pcm_command			* Rch mute off
		
	rts
*--------------------------------------------------------------------------------------

*--------------------------------------------------------------------------------------
_restart_dmac:
		wait_LRCK
		move.b	#%1000_1000,A_dma_ch2+7			* DMA start
	rts
*--------------------------------------------------------------------------------------

*--------------------------------------------------------------------------------------
_stop_dmac:
**		move.b	D_pcm_com,d0
*		or.b	#%0000_0100,d0
**		wait_LRCK
**		move.b	d0,A_pcm_command			* Rch mute
*		and.b	#%1111_0011,d0
*		wait_LRCK2
*		wait_LRCK
*		move.b	d0,A_pcm_command			* Lch mute
		
		move.b	#%0001_0000,A_dma_ch2+7			* DMA stop
		*	     ^					SAB /1:soft abort
	rts
*--------------------------------------------------------------------------------------


*--------------------------------------------------------------------------------------
_keep_check:
@@:	move.l	(a0),a0
	cmpa.l	#$10000,a0
	bcs	@f
	lea.l	$100(a0),a1
	move.l	(a1),d0
	cmp.l	#'SAK1',d0
	bne	@b
	tst.w	6(a1)			* int. mfree call
	bne	@f
	move.w	#1,8(a1)		* ext. mfree call
	move.l	4(a1),a0
	 jsr	(a0)			* _mfree
@@:	rts
*--------------------------------------------------------------------------------------

*--------------------------------------------------------------------------------------
_mfree:
	tst.w	F_ext_mfree
	bne	@@f
	move.w	#1,F_int_mfree
	
	move.w	D_f_handl,-(sp)
	DOS	_CLOSE
	addq.l	#2,sp
	
	move.l	P_prog,-(sp)
	DOS	_MFREE
	addq.l	#4,sp
	move.l	P_buff,-(sp)
	DOS	_MFREE
	addq.l	#4,sp
	tst.w	F_on_hd
	beq	@f
	move.l	P_chain_tbl,-(sp)
	DOS	_MFREE
	addq.l	#4,sp
	
@@:	tst.w	F_dmac_int_on
	beq	@f
	 bsr	_dmac_int_reset
	
@@:	tst.w	F_vdisp_int_on
	beq	@f
	 bsr	_vdisp_int_reset
@@:	rts
*--------------------------------------------------------------------------------------


start:
	push	a0-a1
	 bsr	_keep_check
	pop	a0-a1
	
	lea.l	$10(a0),a0
	move.l	a0,P_prog
	suba.l	a0,a1
	pea.l	(a1)
	pea.l	(a0)
	DOS	_SETBLOCK
	addq.l	#8,sp
	
	 bsr	_sw_check

	super	P_ussp
	 bsr	_board_check
	
	 bsr	_init_dmac
	
	 bsr	_file_read
	
	 bsr	_init2_dmac
	 bsr	_set_unit_command
	

	tst.w	F_on_hd
	bne	hd_mode
	
mem_mode:
	 bsr	_vdisp_int_set
	 bsr	_dmac_int_set
	 bsr	_set_dmac
	 bsr	_start_dmac
	
	move.w	#256,-(sp)
	move.l	#endadd-topadd+16,-(sp)
	DOS	_KEEPPR



hd_mode:
	 bsr	画面作成＆初期化
	 bsr	データタイトル表示

	 bsr	_vdisp_int_set
	 bsr	_dmac_int_set_2
	
	 IOCS	_OS_CUROF

	hd_loop:
		clr.l	D_seek_point
		clr.w	D_btc_point
		clr.w	F_buff_page
		clr.w	F_data_end

		move.w	#1,F_file_read_req
		 bsr	_read
		 bsr	_set_dmac_2
		 bsr	_start_dmac
		 st.b	ぷにふらぐ
		move.w	#1,F_file_read_req
		
		clr.l	elapsed
		clr.w	reading_flag
		move.b	#1,表示フラグ

		 add.l	#1,ループカウンタ
		 bsr	カウンタ表示

		main_loop:
			 bsr	_read
			 bsr	_req_check
			tst.w	F_esc_req
			bne	hd_end
		tst.w	F_data_end
		beq	main_loop
		
	@@:	tst.w	F_dmac_end			* wait DMA end
		beq	@b
		clr.w	F_dmac_end
		
	tst.w	F_loop
	bne	hd_loop

hd_end:
	 bsr	_dmac_int_reset
	 bsr	_vdisp_int_reset
	
	 bsr	_exit_init
	DOS	_EXIT

*┌─────────────────────────────────────────┐
*│                                 初期画面作成                                     │
*└─────────────────────────────────────────┘
*					v1		Sun Jan 23 05:48 JST 1994 (BEL)
画面作成＆初期化:
	move.b	#1,hdフラグ

	moveq.l	#0,d1
	move.l	#$005f_001f,d2
	IOCS	_B_CONSOL

	print	M_clr

	move.b	#2,d1
	IOCS	_B_CLR_ST

	putmes	0,0,96,M_title1

	putmes	0,2,18,M_data_title
	putmes	0,4,18,M_now_time
	putmes	0,5,18,M_elapsed_time
	bsr	freq_check
	putmes	0,8,18,M_loop_count
	putmes	0,10,18,M_hd_read

	clr.w	今のVolume_L
	clr.w	今のVolume_R
	clr.w	以前のVolume_L
	clr.w	以前のVolume_R

	lea.l	left_meter_buf,a0
	moveq.l	#15,d0
@@:	move.b	#$1e,(a0)+
	dbra	d0,@b

	lea.l	right_meter_buf,a0
	moveq.l	#15,d0
@@:	move.b	#$1e,(a0)+
	dbra	d0,@b

	rts

*┌─────────────────────────────────────────┐
*│                                Loop Counter                                      │
*└─────────────────────────────────────────┘
*					v1		Sun Jan 23 08:55 JST 1994 (BEL)
カウンタ表示:
	clr.l	d0
	move.l	ループカウンタ,d0
	lea.l	汎用BUF,a0
	move.b	#3,d1
	FPACK	__IUSING
	putmes	18,8,3,汎用BUF
	rts

*┌─────────────────────────────────────────┐
*│                              Sampling Frequency                                  │
*└─────────────────────────────────────────┘
*					v1		Sun Jan 23 06:12 JST 1994 (BEL)
freq_check:
	putmes	0,6,20,M_Frequency(pc)
	putmes	0,7,20,M_Type(pc)
freq_check_2:
	movem.l	d0-d1/a1,-(sp)
	move.b	#%0011,d1
	move.w	#18,d2
	move.w	#6,d3

	move.b	D_clock,d0
	cmp.b	以前のD_clock,d0
	beq	freq_end_1

	cmpi.b	#1,D_clock
	beq	freq_44
	bmi	freq_32
	bhi	freq_48

	bra	freq_end
freq_32:
	move.w	#7,d4
	lea.l	M_32KHz(pc),a1
	bra	freq_end
freq_44:
	move.w	#7,d4
	lea.l	M_44KHz(pc),a1
	bra	freq_end
freq_48:
	move.w	#7,d4
	lea.l	M_48KHz(pc),a1
freq_end:
	IOCS	_B_PUTMES
	move.b	D_clock,以前のD_clock

freq_end_1:
	move.w	F_stereo,d0
	cmp.w	以前のF_stereo,d0
	beq	freq_end_2

	move.b	#%0011,d1
	move.w	#18,d2
	move.w	#7,d3
	move.w	#9,d4

	tst.w	F_stereo
	beq	freq_mono
	lea.l	M_stereo(pc),a1
	bra	@f
freq_mono:
	lea.l	M_monoral(pc),a1
@@:
	IOCS	_B_PUTMES
	move.w	F_stereo,以前のF_stereo
freq_end_2:
	movem.l	(sp)+,d0-d1/a1
	rts

*┌─────────────────────────────────────────┐
*│                                 経過時間表示                                     │
*└─────────────────────────────────────────┘
*					v1		Sun Jan 23 05:48 JST 1994 (BEL)
_elapsed_time_print:
	tst.b	表示フラグ
	beq	@f

	bsr	now_time_print
*	bsr	小数点以下
	bsr	freq_check_2
@@:	rts

now_time_print:
	DOS	_GETTIM2
	move.l	d0,d1
	cmp.l	以前のnow_time,d0
	beq	@f

	move.l	d0,以前のnow_time

	lea.l	B_時計用バッファ,a1
	IOCS	_TIMEASC

	putmes	18,4,4,B_時計用バッファ

	bsr	elapsed_print
@@:
	rts

elapsed_print:
	add.l	#1,elapsed
	move.l	elapsed,d0
	move.l	d0,d1
	andi.l	#$000000ff,d1
	cmp.l	#60,d1
	beq	分カウンタアップ
	move.l	d0,elapsed
@@:
	move.l	d0,d1
	lea.l	B_elapsed_buff,a1
	IOCS	_TIMEASC

	putmes	18,5,9,B_elapsed_buff+$03
	rts


分カウンタアップ:
	andi.l	#$ff_ff_ff_00,d0
	add.l	#$00_00_01_00,d0
	cmp.l	#$00_00_3c_00,d0
	beq	時間カウンタアップ
	move.l	d0,elapsed
	bra	@b
時間カウンタアップ:
	andi.l	#$ff_ff_00_00,d0
	add.l	#$00_01_00_00,d0
	move.l	d0,elapsed
	bra	@b

小数点以下:
	clr.l	d0
	IOCS	_ONTIME
	divu	#$100,d0
	move.w	d0,time

	lea.l	time,a0
	move.b	#4,d1
	FPACK	__IUSING

	putmes	24,5,2,time+$02
	rts


*┌─────────────────────────────────────────┐
*│                              レベルメータ                                        │
*└─────────────────────────────────────────┘
*										midori
*					v1		Sun Jan 23 21:08 JST 1994 (BEL)
レベルメータ:
*	tst.b	ぷにふらぐ
*	beq	れべるおわり
*	st.b	レベルフラグ

	clr.l	ぼりうむr		* 危険

	movea.l	$e8408c,a0
	clr.l	d0
	clr.l	d1
	move.w	(a0)+,d1
	move.w	(a0),d0

	move.w	d0,CH_L_VOL
	move.w	d1,CH_R_VOL

@@:
	bsr	メータ書き_L
	bsr	メータ書き_R
	bsr	ボリューム
	bra	うううう
れべるおわり:
	move.b	#0,レベルフラグ
うううう:
	bsr	メータ消し_L
	bsr	メータ消し_R
	bsr	Vol_Down_L
	bsr	Vol_Down_R
*	bsr	Vol_Down_C
	rts

メータ書き_L:
	move.w	CH_L_VOL,d0
	btst.l	#15,d0
	bne	@@f

	moveq.l	#13,d7
	move.l	#0,d6
print_l_lp:
	btst.l	#0,d0
	beq	@f
	bsr	書き書き_L
	add.w	#4,ぼりうむl
@@:
	addq.l	#1,d6
	lsr.l	#1,d0
	dbra	d7,print_l_lp
@@:	rts

メータ書き_R:
	move.w	CH_R_VOL,d0
	btst.l	#15,d0
	bne	@@f

	moveq.l	#13,d7
	move.l	#0,d6
print_r_lp:
	btst.l	#0,d0
	beq	@f
	bsr	書き書き_R
	add.w	#4,ぼりうむr
@@:
	addq.l	#1,d6
	lsr.l	#1,d0
	dbra	d7,print_r_lp
@@:	rts

書き書き_L:
	movem.l	d0-d7/a0,-(sp)
	move.b	#$1e,d0
	move.w	#$1e,d7
	lea.l	left_meter_buf,a0
	add.l	d6,a0
	move.b	d0,(a0)

	add.l	d6,d6
l_m_lp:
	clr.l	d1
	move.b	d0,d1
	mulu	#$100,d1
	movea.l	#テキスト_L,a0
	adda.l	d6,a0
	suba.l	d1,a0
	move.w	#$7ffe,(a0)
	sub.b	#1,d0
	dbra	d7,l_m_lp

	movem.l	(sp)+,d0-d7/a0
	rts


書き書き_R:
	movem.l	d0-d7/a0,-(sp)
	move.b	#$1e,d0
	move.w	#$1e,d7
	movea.l	right_meter_buf,a1
	adda.l	d6,a1
	move.b	d0,(a1)

	add.l	d6,d6
l_m_lp_r:
	clr.l	d1
	move.b	d0,d1
	mulu	#$100,d1
	movea.l	#テキスト_R,a0
	adda.l	d6,a0
	suba.l	d1,a0
	move.w	#$7ffe,(a0)
	sub.b	#1,d0
	dbra	d7,l_m_lp_r

	movem.l	(sp)+,d0-d7/a0
	rts

メータ消し_L:
	moveq.l	#15,d6
	moveq.l	#0,d5
	lea.l	left_meter_buf,a1
めーた消し_L_lp:
	clr.l	d0
	move.b	(a1),d0
	sub.b	#1,d0
	bmi	まいなす_L
	move.b	d0,(a1)
	movea.l	#テキスト2_L,a0
	adda.l	d5,a0
	mulu	#256,d0
	suba.l	d0,a0
	move.w	#0,(a0)
とび:
	addq.l	#1,a1
	addq.l	#2,d5
	dbra	d6,めーた消し_L_lp
	rts
まいなす_L:
	move.b	#0,(a1)
	bra	とび

メータ消し_R:					* 'saori'
	moveq.l	#15,d6
	moveq.l	#0,d5
	movea.l	right_meter_buf,a1
めーた消し_R_lp:
	clr.l	d0
	move.b	(a1),d0
	sub.b	#1,d0
	bmi	まいなす_R
	cmp.b	#$1e,d0
	bhi	でかいぞ_R
	move.b	d0,(a1)
	movea.l	#テキスト2_R,a0
	adda.l	d5,a0
	mulu	#256,d0
	suba.l	d0,a0
	move.w	#0,(a0)
R_とび:
	addq.l	#1,a1
	addq.l	#2,d5

	dbra	d6,めーた消し_R_lp
	rts
まいなす_R:
	move.b	#0,(a1)
	bra	R_とび
でかいぞ_R:
	move.b	#$1e,(a1)
	bra	R_とび

*┌─────────────────────────────────────────┐
*│                            マスターボリューム （ウソ                             │
*└─────────────────────────────────────────┘
*										 'yuki'
*					v1		Sun Jan 23 06:00 JST 1994 (BEL)
ボリューム:
	clr.l	d0
	clr.l	d1
*	move.w	今のVolume_L,d0
	move.w	ぼりうむl,d0
	move.w	以前のVolume_L,d1
	cmp.w	d0,d1
	bcc	@f
	btst.l	#15,d0
	bne	@f
	bsr	ボリューム_L
@@:
	clr.l	d0
	clr.l	d1
*	move.w	今のVolume_R,d0
	move.w	ぼりうむr,d0
	move.w	以前のVolume_R,d1
	cmp.w	d0,d1
	bcc	@f
	btst.l	#15,d0
	bne	@f
	bsr	ボリューム_R
@@:
*	clr.l	d0
*	clr.l	d1
*	move.w	今のVolume_C,d0
*	move.w	以前のVolume_C,d1
*	sub.w	d0,d1
*	bhi	@f
*	bsr	ボリューム_C
*@@:
	rts


ボリューム_L:
	bsr	ボリューム消し_L
*	move.w	今のVolume_L,d0
	move.w	ぼりうむl,d0
	move.w	d0,以前のVolume_L
	movea.l	#Volume_ber_L,a0
	bra	_vol_
ボリューム_R:
	bsr	ボリューム消し_R
*	move.w	今のVolume_R,d0
	move.w	ぼりうむl,d0
	move.w	d0,以前のVolume_R
	movea.l	#Volume_ber_R,a0
	bra	_vol_
ボリューム_C:
	bsr	ボリューム消し_C
	move.w	今のVolume_C,d0
	move.w	d0,以前のVolume_C
	movea.l	#Volume_ber_C,a0
_vol_:	clr.l	d1
	move.w	d0,d1
@@:	move.w	#$FFFF,(a0)
	suba.l	#$100,a0
	dbra	d1,@b
	rts

Vol_Down_L:
	clr.l	d0
	move.w	以前のVolume_L,d0
	sub.w	#1,d0
	bmi	V_D_M_L
	move.w	d0,以前のVolume_L
	movea.l	#Volume_ber_L+$100,a0
	mulu	#256,d0
	suba.l	d0,a0
	move.w	#0,(a0)
	rts
V_D_M_L:
	move.w	#0,以前のVolume_L
	rts

Vol_Down_R:
	clr.l	d0
	move.w	以前のVolume_R,d0
	sub.w	#1,d0
	bmi	V_D_M_R
	move.w	d0,以前のVolume_R
	movea.l	#Volume_ber_R+$100,a0
	mulu	#256,d0
	suba.l	d0,a0
	move.w	#0,(a0)
	rts
V_D_M_R:
	move.w	#0,以前のVolume_R
	rts

Vol_Down_C:
	clr.l	d0
	move.w	以前のVolume_C,d0
	sub.w	#1,d0
	bmi	V_D_M_C
	move.w	d0,以前のVolume_C
	movea.l	#Volume_ber_C+$100,a0
	mulu	#256,d0
	suba.l	d0,a0
	move.w	#0,(a0)
	rts
V_D_M_C:
	move.w	#0,以前のVolume_C
	rts

ボリューム消し_L:				* vol
	movea.l	#Volume_ber_L+$100,a0
	bra	@f
ボリューム消し_R:				* vol
	movea.l	#Volume_ber_R+$100,a0
	bra	@f
ボリューム消し_C:				* vol
	movea.l	#Volume_ber_C+$100,a0
@@:
	moveq.l	#80,d1
@@:	move.w	#0,(a0)
	suba.l	#$100,a0
	dbra	d1,@b
	rts

*┌─────────────────────────────────────────┐
*│                               拡張子判別                                         │
*└─────────────────────────────────────────┘
*					v1.1		Mon Jan 24 03:07 JST 1994 (BEL)
_ext_check:
	movem.l	d0/a0,-(sp)

	movea.l	P_fname,a0
@@:	tst.b	(a0)+
	bne	@b

	subq.l	#4,a0

	move.b	(a0)+,d0
	ori.b	#$20,d0
	cmpi.b	#'s',d0
	beq	_ext_stereo
	cmpi.b	#'p',d0
	beq	_ext_monoral
	cmpi.b	#'m',d0
	beq	_ext_mud

	bra	_ext_check_end

_ext_stereo:
	move.b	(a0)+,d0
	cmpi.b	#'1',d0
	beq	__1
	cmpi.b	#'3',d0
	beq	__3
	cmpi.b	#'4',d0
	beq	__4
	bra	_ext_check_end
__1:
	move.b	(a0),d0
	cmpi.b	#'6',d0
	beq	__44KHz__			* 過去互換
	bra	_ext_check_end
__3:
	move.b	(a0),d0
	cmpi.b	#'2',d0
	beq	__32KHz__
	bra	_ext_check_end
__4:
	move.b	(a0),d0
	cmpi.b	#'4',d0
	beq	__44KHz__
	cmpi.b	#'8',d0
	beq	__48KHz__
	bra	_ext_check_end
__1_monoral:
	move.b	(a0),d0
	cmpi.b	#'6',d0
	beq	モノラル_44KHz			* 過去互換
	bra	_ext_check_end

_ext_monoral:
	move.b	(a0)+,d0
	cmpi.b	#'1',d0
	beq	__1_monoral
	cmpi.b	#'3',d0
	beq	__3_monoral
	cmpi.b	#'4',d0
	beq	__4_monoral
	bra	_ext_check_end

__3_monoral:
	move.b	(a0),d0
	cmpi.b	#'2',d0
	beq	モノラル_32KHz
	bra	_ext_check_end
__4_monoral:
	move.b	(a0),d0
	cmpi.b	#'4',d0
	beq	モノラル_44KHz
	cmpi.b	#'8',d0
	beq	モノラル_48KHz
	bra	_ext_check_end

_ext_mud
	move.b	(a0)+,d0
	ori.b	#$20,d0
	cmpi.b	#'u',d0
	bne	@f
	move.b	(a0),d0
	ori.b	#$20,d0
	cmpi.b	#'d',d0
	beq	おっと出ましたmud
@@:
	bra	_ext_check_end

モノラル_32KHz:
	clr.w	F_stereo
	bra	__32KHz__
モノラル_44KHz:
	clr.w	F_stereo
	bra	__44KHz__
モノラル_48KHz:
	clr.w	F_stereo
	bra	__48KHz__

__32KHz__:
	move.b	#0,D_clock
	bra	@f
__44KHz__:
	move.b	#1,D_clock
	bra	@f
__48KHz__:
	move.b	#2,D_clock
@@:
_ext_check_end:
	movem.l	(sp)+,d0/a0
	rts

*┌─────────────────────────────────────────┐
*│                            mudファイル解析                                       │
*└─────────────────────────────────────────┘
*					v1.0		Thu Jan 27 13:22 JST 1994 (BEL)
おっと出ましたmud:			* 'haruka'
	movem.l	(sp)+,d0/a0

	push	d0-d7/a0-a6

	move.w	D_f_handl,ファイルハンドル退避用
	move.l	D_f_size,ファイルサイズ退避用

	clr.w	-(sp)
	move.l	#0,-(sp)
	move.w	D_f_handl,-(sp)
	DOS	_SEEK
	addq.l	#8,sp

	move.l	#256,-(sp)		* 少ないかも(ｫ
	pea	mud用バッファ
	move.w	D_f_handl,-(sp)
	DOS	_READ
	lea.l	10(sp),sp

	move.w	D_f_handl,-(sp)
	DOS	_CLOSE
	addq.l	#2,sp

	lea.l	mud用バッファ,a0

@@:	move.b	(a0)+,d0
	cmpi.b	#'%',d0
	bne	@b

	lea.l	mud_title,a1		* %data-title
@@:	move.b	(a0)+,d0
	move.b	(a1)+,d1
	tst.b	d1
	beq	@f
	cmp.b	d0,d1
	bne	ちがうぞ？
	bra	@b
@@:
	bsr	_sp_skip

	lea.l	タイトルなの,a1
タイトル保存:
	move.b	(a0)+,d0
	move.b	d0,(a1)+
	cmpi.b	#$0d,d0
	beq	@f
	cmpi.b	#$09,d0
	beq	@f
	bra	タイトル保存
@@:	subq.l	#1,a1
	clr.b	(a1)

ちがうぞ？:
@@:	move.b	(a0)+,d0
	cmpi.b	#'%',d0
	bne	@b
	lea.l	mud_data,a1		* %data-file
@@:	move.b	(a0)+,d0
	move.b	(a1)+,d1
	tst.b	d1
	beq	@f
	cmp.b	d0,d1
	bne	じゃない
	bra	@b
@@:
	bsr	_sp_skip

	lea.l	データファイル名,a1
データ保存:
	move.b	(a0)+,d0
	move.b	d0,(a1)+
	cmpi.b	#$0d,d0
	beq	@f
	cmpi.b	#$20,d0
	beq	@f
	cmpi.b	#$09,d0
	beq	@f
	bra	データ保存
@@:	subq.l	#1,a1
	clr.b	(a1)

*------------------------------------------

	clr.w	-(sp)
	pea	データファイル名
	DOS	_OPEN			* file open
	addq.l	#6,sp
	tst.l	d0
	bmi	mud_file_open_err
	move.w	d0,D_f_handl

	bsr	_ext_check2			* 'nobue'

	move.w	#2,-(sp)
	clr.l	-(sp)
	move.w	d0,-(sp)
	DOS	_SEEK			* get file size
	addq.l	#8,sp
	move.l	d0,D_f_size

	pop	d0-d7/a0-a6
	rts

_ext_check2:
	movem.l	d0/a0,-(sp)

	lea.l	データファイル名,a0
@@:	tst.b	(a0)+
	bne	@b

	subq.l	#4,a0
	move.b	(a0)+,d0
	ori.b	#$20,d0
	cmpi.b	#'s',d0
	beq	_ext_stereo
	cmpi.b	#'p',d0
	beq	_ext_monoral
	bra	_ext_check_end

titleじゃない:
じゃない:
	move.w	ファイルハンドル退避用,D_f_handl
	move.l	ファイルサイズ退避用,D_f_size

	IOCS	_B_PRINT		* debug用
	print	M_なぞ
	move.l	a0,a1
	IOCS	_B_PRINT
	pop	d0-d7/a0-a6
	rts


_sp_skip:
@@:	move.b	(a0)+,d0
	cmpi.b	#$20,d0
	beq	@b
	cmpi.b	#$09,d0
	beq	@b
	subq.l	#1,a0
	rts

mud_file_open_err:
	print	M_open_err
	bsr	_exit_init
	move.w	#1,-(sp)
	DOS	_EXIT2

*┌─────────────────────────────────────────┐
*│                               タイトル表示                                       │
*└─────────────────────────────────────────┘
*					v1.0		Thu Jan 27 07:21 JST 1994 (BEL)
データタイトル表示:
	putmes	18,2,80,タイトルなの
	rts

*────────────────────────────────────────────

.even

*--------------------------------------------------------------------------------------
_key_check:
	tst.w	F_xfkey_inh
	bne	_no_key

	move.w	$80a.w,d0
	and.w	#%1110_0000_0000_0011,d0
	beq	_no_key
	move.w	#1,F_key_on

	btst	#5+8,d0				* XF1 ?
	beq	@f
	clr.w	F_stereo

@@:	btst	#6+8,d0				* XF2 ?
	beq	@f
	move.w	#1,F_stereo
@@:	btst	#7+8,d0				* XF3 ?
	beq	@f
	move.b	#0,D_clock
@@:	btst	#0,d0				* XF4 ?
	beq	@f
	move.b	#1,D_clock
@@:	btst	#1,d0				* XF5 ?
	beq	_no_key
	move.b	#2,D_clock
	
 	_no_key:
	rts


_key_check2:
	btst.b	#5,$806.w			* SPACE ?
	bne	@@f
	btst.b	#1,$800.w			* ESC ?
	bne	@@f
	btst.b	#1,$80e.w			* CTRL ?
	beq	@f
	btst.b	#0,$804.w			* 'D' ?
	bne	@@f
@@:	rts

@@:	move.w	#1,F_esc_req
	
	 bsr	_stop_dmac
	
	rts
*--------------------------------------------------------------------------------------

*--------------------------------------------------------------------------------------
_exit_init:
	
	 bsr	_stop_dmac
	
	move.w	D_f_handl,-(sp)
	DOS	_CLOSE
	addq.l	#2,sp
	
	IOCS	_OS_CURON
	rts
*--------------------------------------------------------------------------------------

*--------------------------------------------------------------------------------------
_req_check:
	move.w	D_total_blk,d0
	sub.w	A_dma_ch2+$1a,d0		* BTC
	move.w	D_btc_point,d1
	sub.w	d1,d0
	sub.w	#1,d0
	bmi	@f
	cmp.w	D_buff_blk,d0
	bcc	@@f
@@:	clr.w	F_file_read_req
	rts

@@:	move.w	#1,F_file_read_req
	move.w	D_buff_blk,d0
	add.w	d0,D_btc_point
	rts

*--------------------------------------------------------------------------------------


*--------------------------------------------------------------------------------------
_read:
	tst.w	F_file_read_req
	beq	_read_end
	
	add.w	#1,reading_flag
	
	clr.w	F_file_read_req
	move.l	D_1page_size,d2
	
	clr.w	-(sp)
	move.l	D_seek_point,-(sp)
	move.w	D_f_handl,-(sp)
	DOS	_SEEK			* seek
	addq.l	#8,sp
	
	movea.l	P_buff,a0
	tst.w	F_buff_page
	beq	@f
	adda.l	d2,a0
@@:	not.w	F_buff_page
	
	move.l	D_f_size,d0
	sub.l	D_seek_point,d0
	cmp.l	d2,d0
	bcs	@f
	move.l	d2,d0
@@:	move.l	d0,-(sp)
*	move.l	d2,-(sp)
	move.l	a0,-(sp)
	move.w	D_f_handl,-(sp)
	DOS	_READ			* read
	lea.l	10(sp),sp
	
	add.l	d2,D_seek_point
	move.l	D_f_size,d0
	move.l	D_seek_point,d1
	cmp.l	d0,d1
	bcs	_read_end
	move.w	#1,F_data_end
_read_end:
	rts
*--------------------------------------------------------------------------------------


*--------------------------------------------------------------------------------------
V_vdisp_int:
		di		*	▼
		push	d0-d7/a0-a6
		
	@@:	
		tst.b	hdフラグ
		beq	@f
		 bsr	レベルメータ			* とりあえず〜
		 bsr	_elapsed_time_print
	@@:
		 bsr	_key_check
		tst.w	F_key_on
		beq	@f
		 bsr	_set_unit_command
		clr.w	F_key_on
		
	@@:	tst.w	F_on_hd
		beq	@f
		 bsr	_key_check2
	@@:
		pop	d0-d7/a0-a6
		ei		*	▲
		rte
*--------------------------------------------------------------------------------------


*--------------------------------------------------------------------------------------
_vdisp_int_set:
	di			*	▼
	
*	moveq.l	#1,d1			* 30 int/sec
	moveq.l	#1,d1
	lea.l	V_vdisp_int(pc),a1
	IOCS	_VDISPST
	tst.l	d0
	bne	_int_set_err
	move.w	#1,F_vdisp_int_on
	
	ei			*	▲
	rts

_int_set_err:
	print	M_int_set_err(pc)
	move.w	#1,-(sp)
	DOS	_EXIT2

*-------------------------------------------------------------------------------
_vdisp_int_reset:
	di			*	▼
	
	suba.l	a1,a1
	IOCS	_VDISPST
	clr.w	F_vdisp_int_on
	
	ei			*	▲
	rts
*--------------------------------------------------------------------------------------


*--------------------------------------------------------------------------------------
_dmac_int_set:
	di			*	▼
	
	movea.l	#$1a0,a1
	lea.l	V_dma_end,a0
	move.l	(a1),P_dma_end_org
	move.l	a0,(a1)+
	
	lea.l	V_dma_err,a0
	move.l	(a1),P_dma_err_org
	move.l	a0,(a1)
	
	move.w	#1,F_dmac_int_on
	
	ei			*	▲
	rts

*--------------------------------------------------------------------------------------
_dmac_int_set_2:
	di			*	▼
	
	movea.l	#$1a0,a1
	lea.l	V_dma_end_2,a0
	move.l	(a1),P_dma_end_org
	move.l	a0,(a1)+
	
	lea.l	V_dma_err_2,a0
	move.l	(a1),P_dma_err_org
	move.l	a0,(a1)
	
	move.w	#1,F_dmac_int_on
	
	ei			*	▲
	rts

*-------------------------------------------------------------------------------
_dmac_int_reset:
	di			*	▼
	
	movea.l	#$1a0,a1
	move.l	P_dma_end_org,(a1)+
	move.l	P_dma_err_org,(a1)
	clr.w	F_dmac_int_on
	
	ei			*	▲
	rts
*--------------------------------------------------------------------------------------


*--------------------------------------------------------------------------------------
V_dma_end:
		di	*	▼
		push	d0-d7/a0-a6
		
		move.w	#-1,A_dma_ch2			* error clear
		
		 bsr	_init2_dmac
		 bsr	_key_check
		 bsr	_set_unit_command
		
		tst.w	F_loop
		beq	@f
		btst	#0,$80e.w			* SHIFT key ?
		bne	@f
		
		 bsr	_set_dmac
		 bsr	_restart_dmac
		
		move.w	#1,F_file_read_req
		
		pop	d0-d7/a0-a6
*		ei	*	▲
		rte

*-------------------------------------------------------------------------------
V_dma_err:
		di	*	▼
		push	d0-d7/a0-a6
		
		move.w	#-1,A_dma_ch2			* error clear
		
	@@:	 bsr	_stop_dmac
		 bsr	_dmac_int_reset
		 bsr	_mfree
		
		pop	d0-d7/a0-a6
*		ei	*	▲
		rte
*--------------------------------------------------------------------------------------


*--------------------------------------------------------------------------------------
V_dma_end_2:
V_dma_err_2:
		di	*	▼
		push	d0-d7/a0-a6
		
		move.w	#-1,A_dma_ch2			* error clear
		move.w	#1,F_dmac_end
		
		pop	d0-d7/a0-a6
*		ei	*	▲
		rte
*--------------------------------------------------------------------------------------







*--------------------------------------------------------------------------------------
_set_dmac:
		move.l	#$8000,d1
		move.l	#$10000,d2
		move.l	#$ecc080,A_dma_ch2+$14	* DAR
		move.l	D_f_size,d0
		lsr.l	#1,d0
		divu	d1,d0
		addq.w	#1,d0
		move.w	d0,D_total_blk
		move.w	d0,A_dma_ch2+$1a	* BTC
		subq.w	#1,d0
		lea.l	B_chain_tbl(pc),a0
		move.l	a0,A_dma_ch2+$1c	* BAR
		movea.l	P_buff,a1
		_mk_chain_tbl:
			move.l	a1,(a0)+
			move.w	d1,(a0)+
			adda.l	d2,a1
		dbra.w	d0,_mk_chain_tbl
		swap	d0
		suba.l	d2,a1
		move.l	a1,-6(a0)
		move.w	d0,-2(a0)
	rts
*-------------------------------------------------------------------------------
_set_dmac_2:
		move.l	D_f_size,d0
		lsr.l	#1,d0
		move.l	#$10000,d2
		move.l	#$ecc080,A_dma_ch2+$14	* DAR
		
		move.l	#$8000,d1
		divu	d1,d0
		move.w	d0,D_total_blk
		move.w	d0,A_dma_ch2+$1a	* BTC
		movea.l	P_chain_tbl(pc),a0
		move.l	a0,A_dma_ch2+$1c	* BAR
		movea.l	P_buff,a1
		move.w	D_buff_blk,d6
		lsl.w	#1,d6
		clr.w	d7
		_mk_chain_tbl_2:
			move.l	a1,(a0)+
			move.w	d1,(a0)+
			adda.l	d2,a1
			addq.w	#1,d7
			cmp.w	d6,d7
			bne	@f
			movea.l	P_buff,a1
			clr.w	d7
			@@:
		dbra.w	d0,_mk_chain_tbl_2
		swap	d0
		suba.l	d2,a1
		move.l	a1,-6(a0)
		move.w	d0,-2(a0)
	rts
*--------------------------------------------------------------------------------------


*--------------------------------------------------------------------------------------
_init_dmac:
		movea.l	#$e84000,a0
		lea.l	D_dmac_cpr,a1
		move.b	$2d(a0),(a1)+			* CPR
		move.b	#%000000_11,$2d(a0)
		*		 ^^	ch0 = priority 3	FD
		move.b	$40+$2d(a0),(a1)+
		move.b	#%000000_10,$40+$2d(a0)
		*		 ^^	ch1 = priority 2	HD
		move.b	$80+$2d(a0),(a1)+
		move.b	#%000000_00,$80+$2d(a0)
		*		 ^^	ch2 = priority 0	PCM
		move.b	$c0+$2d(a0),(a1)+
		move.b	#%000000_10,$c0+$2d(a0)
		*		 ^^	ch3 = priority 2	ADPCM
		
	rts
*--------------------------------------------------------------------------------------


*--------------------------------------------------------------------------------------
_init2_dmac:
		movea.l	#A_dma_ch2,a0
*		clr.w	$1a(a0)				* BTC
*		move.b	#%0000_1000,7(a0)
*		move.b	#%0001_1000,7(a0)		* abort
*							* 以前の DMAC int.を発生
		
		move.b	#%1111_1111,(a0)		* CSR error clear
		move.b	#%1000_1000,4(a0)		* DCR
		*	  ^^		cycle steal mode
		*	    ^^		68000 device
		*	       ^	16bit port
		*		 ^^	PCL = status
		
		move.b	#%0001_1010,5(a0)		* OCR
		*	  ^		mem > dev
		*	   ^		DONE no use
		*	    ^^		operand 16bit	* ☆
		*	       ^^	aray chain	
		*		 ^^	ext REQ
		
		move.b	#%0000_0100,6(a0)		* SCR
		*	       ^^	MAC /memory count inc.
		*		 ^^	DAC /device count fix
		move.b	#%0000_1000,7(a0)		* CCR
		*	  ^		STR /1:start
		*	   ^		CNT /1:continue use
		*	    ^		HLT /1:halt
		*	     ^		SAB /1:soft abort
		*	       ^	INT /1:int enable
		
	rts
*--------------------------------------------------------------------------------------

*--------------------------------------------------------------------------------------
*		D_clock(.b),F_stereo(.w),D_input(.b)の値を見て
*		commandレジスタへセット.
		
_set_unit_command:
		move.w	#%1101_1111,d1
		move.b	D_clock,d0
		beq	@f
		move.w	#%1110_1111,d1
		cmp.b	#1,d0
		beq	@f
		move.w	#%1111_1111,d1
		cmp.b	#2,d0
		beq	@f
		move.w	#%1100_1111,d1
	@@:	tst.b	D_input
		bne	@f
		bclr	#6,d1
	@@:	tst.w	F_stereo
		bne	@f
		bclr	#1,d1
	@@:	and.b	#%1111_0011,d1
		move.b	d1,D_pcm_com
		
		or.b	#%0000_1100,d1
		wait_LRCK
		move.b	d1,A_pcm_command			* L,Rch mute off
		
	rts
*--------------------------------------------------------------------------------------


*--------------------------------------------------------------------------------------
_file_read:
	clr.w	-(sp)
	move.l	P_fname,-(sp)
	DOS	_OPEN			* file open
	addq.l	#6,sp
	tst.l	d0
	bmi	file_open_err
	move.w	d0,D_f_handl
	
	bsr	_ext_check

	move.w	#2,-(sp)
	clr.l	-(sp)
	move.w	d0,-(sp)
	DOS	_SEEK			* get file size
	addq.l	#8,sp
	move.l	d0,D_f_size
	

	add.l	#256,d0
	move.l	d0,-(sp)
****	move.w	#2,-(sp)
	DOS	_MALLOC			* malloc
	addq.l	#4,sp
	tst.l	d0
	bmi	on_hd_mode
	move.l	d0,P_buff
	
	clr.w	-(sp)
	clr.l	-(sp)
	move.w	D_f_handl,-(sp)
	DOS	_SEEK
	addq.l	#8,sp
	
	move.l	D_f_size,-(sp)
	move.l	P_buff,-(sp)
	move.w	D_f_handl,-(sp)
	DOS	_READ			* file read
	lea.l	10(sp),sp
	tst.l	d0
	bmi	file_read_err
	
	rts

re_malloc:
	move.l	D_buff_blk_num,d0
	lsr.l	#1,d0
	move.l	d0,D_buff_blk_num
	bra	@f

on_hd_mode:
	move.w	#1,F_on_hd
	print	M_hd_read(pc)
@@:	move.l	D_buff_blk_num,d0		* 
****	tst.w	F_stereo
****	beq	@f
****	lsr.l	#1,d0
@@:	move.w	d0,D_buff_blk
	beq	malloc_err

	swap	d0				* *$8000 *2
****	tst.w	F_stereo
****	beq	@f
****	lsl.l	#1,d0
@@:	move.l	d0,D_1page_size

	lsl.l	#1,d0				* 2 page
	add.l	#256,d0
	move.l	d0,-(sp)
****	move.w	#2,-(sp)
	DOS	_MALLOC			* pcm data malloc
	addq.l	#4,sp
	tst.l	d0
	bmi	re_malloc
	move.l	d0,P_buff
	
	move.l	D_f_size,d0
	lsr.l	#1,d0
	move.l	#$8000,d1
****	tst.w	F_stereo
****	beq	@f
****	lsr.l	#1,d0
@@:	divu	d1,d0
	andi.l	#$ffff,d0
	mulu	#6,d0
	add.l	#256,d0
	move.l	d0,-(sp)
****	move.w	#2,-(sp)
	DOS	_MALLOC			* chain table malloc
	addq.l	#4,sp
	tst.l	d0
	bmi	malloc_err
	move.l	d0,P_chain_tbl
	
	clr.w	-(sp)
	clr.l	-(sp)
	move.w	D_f_handl,-(sp)
	DOS	_SEEK
	addq.l	#8,sp
	
	rts


malloc_err:
	print	M_malloc_err(pc)
	bra	@f

file_open_err:
	print	M_fopen_err(pc)
	bra	@f

file_read_err:
	print	M_fread_err(pc)
@@:	 bsr	_exit_init
	move.w	#1,-(sp)
	DOS	_EXIT2



*--------------------------------------------------------------------------------------
_sw_check:
	tst.b	(a2)+
	beq	_sw_ck_err

_sw_ck_loop:
	move.b	(a2)+,d0
	cmp.b	#' ',d0
	beq	_sw_ck_loop
	cmp.b	#'-',d0
	bne	_no_sw

	move.b	(a2)+,d0
1:	cmp.b	#'3',d0
	beq	_sw_3
	cmp.b	#'4',d0
	beq	_sw_4
	cmp.b	#'k',d0
	beq	_sw_k
	cmp.b	#'l',d0
	beq	_sw_l
	cmp.b	#'m',d0
	beq	_sw_m
	bra	_sw_ck_err2

2:	move.b	(a2)+,d0
	cmp.b	#' ',d0
	beq	_sw_ck_end
	cmp.b	#'-',d0
	bne	1b
	move.b	(a2)+,d0
	bra	1b

_sw_k:	move.w	#1,F_xfkey_inh
	bra	2b
_sw_l:	move.w	#1,F_loop
	bra	2b
_sw_m:	clr.w	F_stereo
	bra	2b

_sw_3:	cmpi.b	#'2',(a2)+
	bne	_sw_ck_err2
	move.b	#0,D_clock
	bra	2b
_sw_4:	move.b	#1,D_clock
	cmpi.b	#'4',(a2)+
	beq	2b
	cmpi.b	#'8',-1(a2)
	bne	_sw_ck_err2
	move.b	#2,D_clock
	bra	2b

_no_sw:
	subq	#1,a2
_sw_ck_end:
	move.l	a2,P_fname
@@:	cmp.b	#'+',(a2)+
	bcc	@b
	clr.b	(a2)
	
	moveq	#0,d0
	rts

_sw_ck_err:
_sw_ck_err2:
	print	M_usage(pc)
	move.w	#2,-(sp)
	DOS	_EXIT2
*--------------------------------------------------------------------------------------


*--------------------------------------------------------------------------------------
_board_check:
	push	a0-a6
	 bsr	@@f
	bne	@f
	pop	a0-a6
	rts

@@:	print	M_board_err(pc)
	move.w	#1,-(sp)
	DOS	_EXIT2

@@:	clr.l	d0		* べるりんｽﾏﾝ!（ぉ
	move.l	a7,a6
	lea.l	@f(pc),a1
	move.l	8.w,a2
	move.l	a1,8.w
	move.w	$ecc080,d0
	move.l	a2,8.w
	moveq.l	#0,d0
	rts

@@:	move.l	a6,a7
	move.l	a2,8.w
	move.l	#'saki',d0
	rts
*--------------------------------------------------------------------------------------


*--------------------------------------------------------------------------------------
.data
P_ussp:		dc.l	0
P_fname:	dc.l	0
P_dma_end_org:	dc.l	0
P_dma_err_org:	dc.l	0
P_prog:		dc.l	0
P_buff:		dc.l	0
P_chain_tbl:	dc.l	0
D_f_size:	dc.l	0
D_f_handl:	dc.w	0
F_loop:		dc.w	0
F_stereo:	dc.w	1
F_triga:	dc.w	0
F_on_hd:	dc.w	0
F_key_on:	dc.w	0
F_xfkey_inh:	dc.w	0

			.even
elapsed:		.dc.l	0
以前のnow_time:		.dc.l	0
以前のelapsed:		.dc.l	0
以前のF_stereo:		.dc.w	0
CH_R_VOL:		.dc.w	$ffff
CH_L_VOL:		.dc.w	$ffff
CH_R_VOL_1:		.dc.w	1
CH_L_VOL_1:		.dc.w	1
メータライン_L:		.dc.w	16
メータライン_R:		.dc.w	16
以前のD_clock:		.dc.b	0
表示フラグ:		.dc.b	0
hdフラグ:		.dc.b	0
メータフラグ_L:		.dc.b	0
メータフラグ_R:		.dc.b	0
レベルフラグ:		.dc.b	0
ぷにふらぐ:		.dc.b	0

			.even
D_buff_blk_num:		dc.l	64		* 確保希望 block 数
D_total_blk:		dc.w	0		* 総 BTC 数
D_buff_blk:		dc.w	0		* 1page 当たりの BTC
D_1page_size:		dc.l	0		* 1page 当たりの バッファ量
D_dmac_cpr:		dc.b	0,0,0,0		* dmac CPR register

D_btc_point:		dc.w	0		* 以前の BTC
D_seek_point:		dc.l	0		* 現在の file seek 位置
F_buff_page:		dc.w	0		* page0=0 ; page1=-1
F_file_read_req:	dc.w	1		* file read 要求
F_data_end:		dc.w	0		* end of data
F_esc_req:		dc.w	0		* program exit 要求
F_dmac_end:		dc.w	0		* dmac end flag

F_vdisp_int_on:		dc.w	0
F_dmac_int_on:		dc.w	0

M_usage:	dc.b	'Usage: play_16 [-klm] [-freq.] filename',cr,lf
		dc.b	'Options:				',cr,lf
		dc.b	'	 -k    not sense XFn keys	',cr,lf
		dc.b	'	 -l    loop mode		',cr,lf
		dc.b	'	 -m    for monoral data		',cr,lf
		dc.b	'	 -32   32   kHz			',cr,lf
		dc.b	'	 -44   44.1 kHz			',cr,lf
		dc.b	'	 -48   48   kHz			',cr,lf
		dc.b	cr,lf
		dc.b	'Keys:					',cr,lf
		dc.b	'	 XF1   monoral			',cr,lf
		dc.b	'	 XF2   stereo			',cr,lf
		dc.b	'	 XF3   32   kHz			',cr,lf
		dc.b	'	 XF4   44.1 kHz			',cr,lf
		dc.b	'	 XF5   48   kHz			',cr,lf
		dc.b	'	shift  exit	(on loop mode)	',cr,lf
		dc.b	'	^D     exit	(on HD mode)	',cr,lf
		dc.b	cr,lf
		dc.b	"16Bit PCM player for 'Mercury-Unit V2,V3'. Ver 0.43 (C)Tonkyun",cr,lf
		dc.b	'                                         with Minty-madoka and Super.Asuka',cr,lf,0

M_hd_read:		.dc.b	'HD reading mode.',0
M_malloc_err:		.dc.b	'No memory!',cr,lf,0
M_fopen_err:		.dc.b	'File open error!',cr,lf,0
M_fread_err:		.dc.b	'File read error!',cr,lf,0
M_board_err:		.dc.b	'Mercury-Unit is not exist!',cr,lf,0
M_int_set_err:		.dc.b	'Vdisp int set error!',cr,lf,0

M_clr:			.dc.b	'*',0
M_title1:		.dc.b	"─────────── 16Bit PCM player for 'Mercury-Unit' Version 0.43 ──────────── ",0
M_data_title:		.dc.b	'Data Title     :',0
M_now_time:		.dc.b	'Now Time       :',0
M_elapsed_time:		.dc.b	'Elapsed Time   :',0
M_Frequency:		.dc.b	'Play Frequency :',0
M_Type:			.dc.b	'Play Type      :',0
M_loop_count:		.dc.b	'Loop Count     :',0
M_32KHz:		.dc.b	'32KHz',0
M_44KHz:		.dc.b	'44.1KHz',0
M_48KHz:		.dc.b	'48KHz',0
M_stereo:		.dc.b	'Stereo ',0
M_monoral:		.dc.b	'Monoral',0
M_crlf:			.dc.b	cr,lf,0
M_知らない:		.dc.b	"Unknow'n Title..",0
M_open_err:		.dc.b	'データファイルが見つかりません',13,10,0
M_なぞ:			.dc.b	'まったくもってなぞ',13,10,0
M_たいとるみつかんない	.dc.b	'なんでだよ〜',13,10,0
mud_title:		.dc.b	'data-title',0
mud_data:		.dc.b	'data-file',0

		.even
		.bss
			.even
汎用BUF:		.ds.b	64
B_buff:			.ds.b	32
B_時計用バッファ:	.ds.b	10
B_elapsed_buff:		.ds.b	10
time:			.ds.b	10
left_meter_buf:		.ds.b	20
right_meter_buf:	.ds.b	20
left_vol_buf:		.ds.b	1
right_vol_buf:		.ds.b	1
点滅BUF:		.ds.b	2

			.even
今のVolume_L:		.ds.w	1
今のVolume_R:		.ds.w	1
今のVolume_C:		.ds.w	1
以前のVolume_L:		.ds.w	1
以前のVolume_R:		.ds.w	1
以前のVolume_C:		.ds.w	1
reading_flag:		.ds.w	1
ぼりうむr:		.ds.w	1
ぼりうむl:		.ds.w	1

			.even
ループカウンタ:		.ds.l	1
Level_point:		.ds.l	1
ファイルサイズ退避用:	.ds.l	1
ファイルハンドル退避用:	.ds.w	1

			.even
タイトル調査用なの:	.ds.w	8
タイトルなの:		.ds.b	68
			.even
データファイル名:	.ds.b	32

			.even
mud用バッファ:		.ds.b	1024*2
			.even
B_chain_tbl:		.ds.b	384*6
endadd:
		.end	start
*--------------------------------------------------------------------------------------
